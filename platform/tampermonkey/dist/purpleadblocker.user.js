// ==UserScript==
// @name         Purple Adblocker
// @source       https://github.com/arthurbolsoni/Purple-adblock
// @version      2.6.3
// @description  Per aspera ad astra
// @author       ArthurBolzoni
// @downloadURL  https://raw.githubusercontent.com/arthurbolsoni/Purple-adblock/main/platform/tampermonkey/dist/purpleadblocker.user.js
// @updateURL    https://raw.githubusercontent.com/arthurbolsoni/Purple-adblock/main/platform/tampermonkey/dist/purpleadblocker.user.js
// @match        *://*.twitch.tv/*
// @run-at       document-start
// @grant        none
// ==/UserScript==

var p=`var i=Object.create;var{defineProperty:u,getPrototypeOf:a,getOwnPropertyNames:r}=Object;var n=Object.prototype.hasOwnProperty;var t=(Q,J,z)=>{z=Q!=null?i(a(Q)):{};const \$=J||!Q||!Q.__esModule?u(z,"default",{value:Q,enumerable:!0}):z;for(let Z of r(Q))if(!n.call(\$,Z))u(\$,Z,{get:()=>Q[Z],enumerable:!0});return \$};var e=(Q,J)=>()=>(J||Q((J={exports:{}}).exports,J),J.exports);var D=function(Q,J,z,\$){var Z=arguments.length,j=Z<3?J:\$===null?\$=Object.getOwnPropertyDescriptor(J,z):\$,X;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")j=Reflect.decorate(Q,J,z,\$);else for(var W=Q.length-1;W>=0;W--)if(X=Q[W])j=(Z<3?X(j):Z>3?X(J,z,j):X(J,z))||j;return Z>3&&j&&Object.defineProperty(J,z,j),j};var m=e((N0,p)=>{var R;if(typeof window!=="undefined")R=window;else if(typeof global!=="undefined")R=global;else if(typeof self!=="undefined")R=self;else R={};p.exports=R});var o=()=>{return(Q)=>{}};var U=(Q,J=null)=>{return(z,\$)=>{if(!global.routerList)global.routerList=[];global.routerList.push({propertyKey:\$,match:Q,ignore:J})}},S=(Q)=>{return(J,z)=>{global.addEventListener("message",(\$)=>{if(\$?.data?.funcName==Q)global.appController[z](\$.data)})}};var B;(function(W){W["PICTURE"]="picture-by-picture";W["THUNDERDOME"]="thunderdome";W["EMBED"]="embed";W["FRONTPAGE"]="frontpage";W["SITE"]="site";W["EXTERNAL"]="external";W["DNS"]="dns"})(B||(B={}));class P{Q;getSettings=()=>global.postMessage({type:"getSettings"});constructor(Q){this.appService=Q;this.getSettings()}async setIntegrity(Q){this.appService.setIntegrityToken(JSON.parse(Q.value).token)}async onChannel(Q,J){const z=await global.request(Q,J);if(!z.ok)return console.log("Error on channel load"),z;const \$=await z.text(),Z=/hls\/(.*).m3u8/gm.exec(Q)||[];return await this.appService.setChannel(Z[1]),new Response(\$)}async onFetch(Q,J){const z=await(await request(Q,J)).text(),\$=await this.appService.onFetch(z);return new Response(\$)}async onChannelPicture(Q,J){const z=await global.request(Q,J);if(!z.ok)return console.log("Error on channel load"),z;const \$=await z.text();return await this.appService.currentStream().setStreamAccess(\$,B.PICTURE),console.log("picture-by-picture",\$),new Response}async setSettings(Q){this.appService.setSettings(Q)}async setQuality(Q){this.appService.quality=Q.value}}D([S("setIntegrity")],P.prototype,"setIntegrity",null),D([U("usher.ttvnw.net/api/channel/hls/","picture-by-picture")],P.prototype,"onChannel",null),D([U("hls.ttvnw.net/v1/playlist/")],P.prototype,"onFetch",null),D([U("picture-by-picture")],P.prototype,"onChannelPicture",null),D([S("setSettings")],P.prototype,"setSettings",null),D([S("setQuality")],P.prototype,"setQuality",null),P=D([o()],P);class x{Q;constructor(Q){this.integrityToken=Q}async playbackAccessToken(Q,J,z){const \$={operationName:"PlaybackAccessToken",variables:{isLive:!0,login:Q,isVod:!1,vodID:"",playerType:J},extensions:{persistedQuery:{version:1,sha256Hash:"0828119ded1c13477966434e15800ff57ddacf13ba1911c129dc2200705b0712"}}},j=await(await global.request("https://gql.twitch.tv/gql#origin=twilight",{method:"POST",headers:{Host:"gql.twitch.tv","Client-ID":"kimne78kx3ncx6brgo4mv6wki5h1ko","Client-Integrity":z},body:JSON.stringify(\$)})).json();return{token:j.data.streamPlaybackAccessToken.value,signature:j.data.streamPlaybackAccessToken.signature}}async playbackAccessToken_Template(Q,J){const \$={operationName:"PlaybackAccessToken_Template",query:'query PlaybackAccessToken_Template(\$login: String!, \$isLive: Boolean!, \$vodID: ID!, \$isVod: Boolean!, \$playerType: String!) { streamPlaybackAccessToken(channelName: \$login, params: {platform: "web", playerBackend: "mediaplayer", playerType: \$playerType}) @include(if: \$isLive) { value signature __typename } videoPlaybackAccessToken(id: \$vodID, params: {platform: "web", playerBackend: "mediaplayer", playerType: \$playerType}) @include(if: \$isVod) { value signature __typename }}',variables:{isLive:!0,isVod:!1,vodID:"",login:Q,playerType:J}},j=await(await global.request("https://gql.twitch.tv/gql",{method:"POST",headers:{Host:"gql.twitch.tv","Client-ID":"kimne78kx3ncx6brgo4mv6wki5h1ko"},body:JSON.stringify(\$)})).json();return{token:j.data.streamPlaybackAccessToken.value,signature:j.data.streamPlaybackAccessToken.signature}}async getM3U8(Q,J){const z="allow_source=true&fast_bread=true&p="+Math.floor(Math.random()*1e7)+"&player_backend=mediaplayer&playlist_include_framerate=true&reassignments_supported=false&sig="+J.signature+"&supported_codecs=avc1&token="+J.token;return(await global.request("https://usher.ttvnw.net/api/channel/hls/"+Q+".m3u8?"+z)).text()}}class L{type;urlList;sig;bestQuality=()=>{return this.urlList[0]};findByQuality=(Q)=>this.urlList.find((J)=>J.quality==Q);constructor(Q){Object.assign(this,Q)}}class T{serverList=[];channelName;twitchService;constructor(Q){this.channelName=Q,this.twitchService=new x("")}removeServer(Q){const J=this.serverList.indexOf(Q);if(J>-1)this.serverList.splice(J,1)}setStreamAccess(Q,J="local",z=!0){const \$=[];let Z;const j=/NAME="((?:\S+\s+\S+|\S+))",AUTO(?:^|\S+\s+)(?:^|\S+\s+)(https:\/\/video(\S+).m3u8)/g;while((Z=j.exec(Q))!==null)\$.push({quality:Z[1],url:Z[2]});const X=new L({type:J,urlList:\$,sig:z});this.serverList.push(X)}async createStreamAccess(Q,J){try{const z=await this.twitchService.playbackAccessToken(this.channelName,Q,J);console.log("New Connection: ",Q,z.token.includes('"hide_ads":true'));const \$=await this.twitchService.getM3U8(this.channelName,z);this.setStreamAccess(\$,Q)}catch(z){logPrint(z)}}getStreamByStreamType(Q){const J=this.serverList.filter((z)=>z.type==Q);if(!J)return[];return J}}var b=function(){function Q(){this.listeners={}}var J=Q.prototype;return J.on=function z(\$,Z){if(!this.listeners[\$])this.listeners[\$]=[];this.listeners[\$].push(Z)},J.off=function z(\$,Z){if(!this.listeners[\$])return!1;var j=this.listeners[\$].indexOf(Z);return this.listeners[\$]=this.listeners[\$].slice(0),this.listeners[\$].splice(j,1),j>-1},J.trigger=function z(\$){var Z=this.listeners[\$];if(!Z)return;if(arguments.length===2){var j=Z.length;for(var X=0;X<j;++X)Z[X].call(this,arguments[1])}else{var W=Array.prototype.slice.call(arguments,1),I=Z.length;for(var F=0;F<I;++F)Z[F].apply(this,W)}},J.dispose=function z(){this.listeners={}},J.pipe=function z(\$){this.on("data",function(Z){\$.push(Z)})},Q}();function A(){return A=Object.assign?Object.assign.bind():function(Q){for(var J=1;J<arguments.length;J++){var z=arguments[J];for(var \$ in z)if(Object.prototype.hasOwnProperty.call(z,\$))Q[\$]=z[\$]}return Q},A.apply(this,arguments)}var w=t(m(),1),z0=function Q(J){return w.default.atob?w.default.atob(J):Buffer.from(J,"base64").toString("binary")};function k(Q){var J=z0(Q),z=new Uint8Array(J.length);for(var \$=0;\$<J.length;\$++)z[\$]=J.charCodeAt(\$);return z}/*! @name m3u8-parser @version 7.1.0 @license Apache-2.0 */class c extends b{constructor(){super();this.buffer=""}push(Q){let J;this.buffer+=Q,J=this.buffer.indexOf("\n");for(;J>-1;J=this.buffer.indexOf("\n"))this.trigger("data",this.buffer.substring(0,J)),this.buffer=this.buffer.substring(J+1)}}var J0=String.fromCharCode(9),g=function(Q){const J=/([0-9.]*)?@?([0-9.]*)?/.exec(Q||""),z={};if(J[1])z.length=parseInt(J[1],10);if(J[2])z.offset=parseInt(J[2],10);return z},Q0=function(){return new RegExp("(?:^|,)("+'(?:[^=]*)=(?:"[^"]*"|[^,]*)'+")")},E=function(Q){const J={};if(!Q)return J;const z=Q.split(Q0());let \$=z.length,Z;while(\$--){if(z[\$]==="")continue;Z=/([^=]*)=(.*)/.exec(z[\$]).slice(1),Z[0]=Z[0].replace(/^\s+|\s+\$/g,""),Z[1]=Z[1].replace(/^\s+|\s+\$/g,""),Z[1]=Z[1].replace(/^['"](.*)['"]\$/g,"\$1"),J[Z[0]]=Z[1]}return J};class s extends b{constructor(){super();this.customParsers=[],this.tagMappers=[]}push(Q){let J,z;if(Q=Q.trim(),Q.length===0)return;if(Q[0]!=="#"){this.trigger("data",{type:"uri",uri:Q});return}this.tagMappers.reduce((Z,j)=>{const X=j(Q);if(X===Q)return Z;return Z.concat([X])},[Q]).forEach((Z)=>{for(let j=0;j<this.customParsers.length;j++)if(this.customParsers[j].call(this,Z))return;if(Z.indexOf("#EXT")!==0){this.trigger("data",{type:"comment",text:Z.slice(1)});return}if(Z=Z.replace("\r",""),J=/^#EXTM3U/.exec(Z),J){this.trigger("data",{type:"tag",tagType:"m3u"});return}if(J=/^#EXTINF:([0-9\.]*)?,?(.*)?\$/.exec(Z),J){if(z={type:"tag",tagType:"inf"},J[1])z.duration=parseFloat(J[1]);if(J[2])z.title=J[2];this.trigger("data",z);return}if(J=/^#EXT-X-TARGETDURATION:([0-9.]*)?/.exec(Z),J){if(z={type:"tag",tagType:"targetduration"},J[1])z.duration=parseInt(J[1],10);this.trigger("data",z);return}if(J=/^#EXT-X-VERSION:([0-9.]*)?/.exec(Z),J){if(z={type:"tag",tagType:"version"},J[1])z.version=parseInt(J[1],10);this.trigger("data",z);return}if(J=/^#EXT-X-MEDIA-SEQUENCE:(\-?[0-9.]*)?/.exec(Z),J){if(z={type:"tag",tagType:"media-sequence"},J[1])z.number=parseInt(J[1],10);this.trigger("data",z);return}if(J=/^#EXT-X-DISCONTINUITY-SEQUENCE:(\-?[0-9.]*)?/.exec(Z),J){if(z={type:"tag",tagType:"discontinuity-sequence"},J[1])z.number=parseInt(J[1],10);this.trigger("data",z);return}if(J=/^#EXT-X-PLAYLIST-TYPE:(.*)?\$/.exec(Z),J){if(z={type:"tag",tagType:"playlist-type"},J[1])z.playlistType=J[1];this.trigger("data",z);return}if(J=/^#EXT-X-BYTERANGE:(.*)?\$/.exec(Z),J){z=A(g(J[1]),{type:"tag",tagType:"byterange"}),this.trigger("data",z);return}if(J=/^#EXT-X-ALLOW-CACHE:(YES|NO)?/.exec(Z),J){if(z={type:"tag",tagType:"allow-cache"},J[1])z.allowed=!/NO/.test(J[1]);this.trigger("data",z);return}if(J=/^#EXT-X-MAP:(.*)\$/.exec(Z),J){if(z={type:"tag",tagType:"map"},J[1]){const j=E(J[1]);if(j.URI)z.uri=j.URI;if(j.BYTERANGE)z.byterange=g(j.BYTERANGE)}this.trigger("data",z);return}if(J=/^#EXT-X-STREAM-INF:(.*)\$/.exec(Z),J){if(z={type:"tag",tagType:"stream-inf"},J[1]){if(z.attributes=E(J[1]),z.attributes.RESOLUTION){const j=z.attributes.RESOLUTION.split("x"),X={};if(j[0])X.width=parseInt(j[0],10);if(j[1])X.height=parseInt(j[1],10);z.attributes.RESOLUTION=X}if(z.attributes.BANDWIDTH)z.attributes.BANDWIDTH=parseInt(z.attributes.BANDWIDTH,10);if(z.attributes["FRAME-RATE"])z.attributes["FRAME-RATE"]=parseFloat(z.attributes["FRAME-RATE"]);if(z.attributes["PROGRAM-ID"])z.attributes["PROGRAM-ID"]=parseInt(z.attributes["PROGRAM-ID"],10)}this.trigger("data",z);return}if(J=/^#EXT-X-MEDIA:(.*)\$/.exec(Z),J){if(z={type:"tag",tagType:"media"},J[1])z.attributes=E(J[1]);this.trigger("data",z);return}if(J=/^#EXT-X-ENDLIST/.exec(Z),J){this.trigger("data",{type:"tag",tagType:"endlist"});return}if(J=/^#EXT-X-DISCONTINUITY/.exec(Z),J){this.trigger("data",{type:"tag",tagType:"discontinuity"});return}if(J=/^#EXT-X-PROGRAM-DATE-TIME:(.*)\$/.exec(Z),J){if(z={type:"tag",tagType:"program-date-time"},J[1])z.dateTimeString=J[1],z.dateTimeObject=new Date(J[1]);this.trigger("data",z);return}if(J=/^#EXT-X-KEY:(.*)\$/.exec(Z),J){if(z={type:"tag",tagType:"key"},J[1]){if(z.attributes=E(J[1]),z.attributes.IV){if(z.attributes.IV.substring(0,2).toLowerCase()==="0x")z.attributes.IV=z.attributes.IV.substring(2);z.attributes.IV=z.attributes.IV.match(/.{8}/g),z.attributes.IV[0]=parseInt(z.attributes.IV[0],16),z.attributes.IV[1]=parseInt(z.attributes.IV[1],16),z.attributes.IV[2]=parseInt(z.attributes.IV[2],16),z.attributes.IV[3]=parseInt(z.attributes.IV[3],16),z.attributes.IV=new Uint32Array(z.attributes.IV)}}this.trigger("data",z);return}if(J=/^#EXT-X-START:(.*)\$/.exec(Z),J){if(z={type:"tag",tagType:"start"},J[1])z.attributes=E(J[1]),z.attributes["TIME-OFFSET"]=parseFloat(z.attributes["TIME-OFFSET"]),z.attributes.PRECISE=/YES/.test(z.attributes.PRECISE);this.trigger("data",z);return}if(J=/^#EXT-X-CUE-OUT-CONT:(.*)?\$/.exec(Z),J){if(z={type:"tag",tagType:"cue-out-cont"},J[1])z.data=J[1];else z.data="";this.trigger("data",z);return}if(J=/^#EXT-X-CUE-OUT:(.*)?\$/.exec(Z),J){if(z={type:"tag",tagType:"cue-out"},J[1])z.data=J[1];else z.data="";this.trigger("data",z);return}if(J=/^#EXT-X-CUE-IN:(.*)?\$/.exec(Z),J){if(z={type:"tag",tagType:"cue-in"},J[1])z.data=J[1];else z.data="";this.trigger("data",z);return}if(J=/^#EXT-X-SKIP:(.*)\$/.exec(Z),J&&J[1]){if(z={type:"tag",tagType:"skip"},z.attributes=E(J[1]),z.attributes.hasOwnProperty("SKIPPED-SEGMENTS"))z.attributes["SKIPPED-SEGMENTS"]=parseInt(z.attributes["SKIPPED-SEGMENTS"],10);if(z.attributes.hasOwnProperty("RECENTLY-REMOVED-DATERANGES"))z.attributes["RECENTLY-REMOVED-DATERANGES"]=z.attributes["RECENTLY-REMOVED-DATERANGES"].split(J0);this.trigger("data",z);return}if(J=/^#EXT-X-PART:(.*)\$/.exec(Z),J&&J[1]){if(z={type:"tag",tagType:"part"},z.attributes=E(J[1]),["DURATION"].forEach(function(j){if(z.attributes.hasOwnProperty(j))z.attributes[j]=parseFloat(z.attributes[j])}),["INDEPENDENT","GAP"].forEach(function(j){if(z.attributes.hasOwnProperty(j))z.attributes[j]=/YES/.test(z.attributes[j])}),z.attributes.hasOwnProperty("BYTERANGE"))z.attributes.byterange=g(z.attributes.BYTERANGE);this.trigger("data",z);return}if(J=/^#EXT-X-SERVER-CONTROL:(.*)\$/.exec(Z),J&&J[1]){z={type:"tag",tagType:"server-control"},z.attributes=E(J[1]),["CAN-SKIP-UNTIL","PART-HOLD-BACK","HOLD-BACK"].forEach(function(j){if(z.attributes.hasOwnProperty(j))z.attributes[j]=parseFloat(z.attributes[j])}),["CAN-SKIP-DATERANGES","CAN-BLOCK-RELOAD"].forEach(function(j){if(z.attributes.hasOwnProperty(j))z.attributes[j]=/YES/.test(z.attributes[j])}),this.trigger("data",z);return}if(J=/^#EXT-X-PART-INF:(.*)\$/.exec(Z),J&&J[1]){z={type:"tag",tagType:"part-inf"},z.attributes=E(J[1]),["PART-TARGET"].forEach(function(j){if(z.attributes.hasOwnProperty(j))z.attributes[j]=parseFloat(z.attributes[j])}),this.trigger("data",z);return}if(J=/^#EXT-X-PRELOAD-HINT:(.*)\$/.exec(Z),J&&J[1]){z={type:"tag",tagType:"preload-hint"},z.attributes=E(J[1]),["BYTERANGE-START","BYTERANGE-LENGTH"].forEach(function(j){if(z.attributes.hasOwnProperty(j)){z.attributes[j]=parseInt(z.attributes[j],10);const X=j==="BYTERANGE-LENGTH"?"length":"offset";z.attributes.byterange=z.attributes.byterange||{},z.attributes.byterange[X]=z.attributes[j],delete z.attributes[j]}}),this.trigger("data",z);return}if(J=/^#EXT-X-RENDITION-REPORT:(.*)\$/.exec(Z),J&&J[1]){z={type:"tag",tagType:"rendition-report"},z.attributes=E(J[1]),["LAST-MSN","LAST-PART"].forEach(function(j){if(z.attributes.hasOwnProperty(j))z.attributes[j]=parseInt(z.attributes[j],10)}),this.trigger("data",z);return}if(J=/^#EXT-X-DATERANGE:(.*)\$/.exec(Z),J&&J[1]){z={type:"tag",tagType:"daterange"},z.attributes=E(J[1]),["ID","CLASS"].forEach(function(X){if(z.attributes.hasOwnProperty(X))z.attributes[X]=String(z.attributes[X])}),["START-DATE","END-DATE"].forEach(function(X){if(z.attributes.hasOwnProperty(X))z.attributes[X]=new Date(z.attributes[X])}),["DURATION","PLANNED-DURATION"].forEach(function(X){if(z.attributes.hasOwnProperty(X))z.attributes[X]=parseFloat(z.attributes[X])}),["END-ON-NEXT"].forEach(function(X){if(z.attributes.hasOwnProperty(X))z.attributes[X]=/YES/i.test(z.attributes[X])}),["SCTE35-CMD"," SCTE35-OUT","SCTE35-IN"].forEach(function(X){if(z.attributes.hasOwnProperty(X))z.attributes[X]=z.attributes[X].toString(16)});const j=/^X-([A-Z]+-)+[A-Z]+\$/;for(let X in z.attributes){if(!j.test(X))continue;const W=/[0-9A-Fa-f]{6}/g.test(z.attributes[X]),I=/^\d+(\.\d+)?\$/.test(z.attributes[X]);z.attributes[X]=W?z.attributes[X].toString(16):I?parseFloat(z.attributes[X]):String(z.attributes[X])}this.trigger("data",z);return}if(J=/^#EXT-X-INDEPENDENT-SEGMENTS/.exec(Z),J){this.trigger("data",{type:"tag",tagType:"independent-segments"});return}if(J=/^#EXT-X-CONTENT-STEERING:(.*)\$/.exec(Z),J){z={type:"tag",tagType:"content-steering"},z.attributes=E(J[1]),this.trigger("data",z);return}this.trigger("data",{type:"tag",data:Z.slice(4)})})}addParser({expression:Q,customType:J,dataParser:z,segment:\$}){if(typeof z!=="function")z=(Z)=>Z;this.customParsers.push((Z)=>{if(Q.exec(Z))return this.trigger("data",{type:"custom",data:z(Z),customType:J,segment:\$}),!0})}addTagMapper({expression:Q,map:J}){const z=(\$)=>{if(Q.test(\$))return J(\$);return \$};this.tagMappers.push(z)}}var V0=(Q)=>Q.toLowerCase().replace(/-(\w)/g,(J)=>J[1].toUpperCase()),f=function(Q){const J={};return Object.keys(Q).forEach(function(z){J[V0(z)]=Q[z]}),J},d=function(Q){const{serverControl:J,targetDuration:z,partTargetDuration:\$}=Q;if(!J)return;const Z="#EXT-X-SERVER-CONTROL",j="holdBack",X="partHoldBack",W=z&&z*3,I=\$&&\$*2;if(z&&!J.hasOwnProperty(j))J[j]=W,this.trigger("info",{message:\`\${Z} defaulting HOLD-BACK to targetDuration * 3 (\${W}).\`});if(W&&J[j]<W)this.trigger("warn",{message:\`\${Z} clamping HOLD-BACK (\${J[j]}) to targetDuration * 3 (\${W})\`}),J[j]=W;if(\$&&!J.hasOwnProperty(X))J[X]=\$*3,this.trigger("info",{message:\`\${Z} defaulting PART-HOLD-BACK to partTargetDuration * 3 (\${J[X]}).\`});if(\$&&J[X]<I)this.trigger("warn",{message:\`\${Z} clamping PART-HOLD-BACK (\${J[X]}) to partTargetDuration * 2 (\${I}).\`}),J[X]=I};class h extends b{constructor(){super();this.lineStream=new c,this.parseStream=new s,this.lineStream.pipe(this.parseStream),this.lastProgramDateTime=null;const Q=this,J=[];let z={},\$,Z,j=!1;const X=function(){},W={AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},I="urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";let F=0;this.manifest={allowCache:!0,discontinuityStarts:[],dateRanges:[],segments:[]};let M=0,_=0;const K={};this.on("end",()=>{if(z.uri||!z.parts&&!z.preloadHints)return;if(!z.map&&\$)z.map=\$;if(!z.key&&Z)z.key=Z;if(!z.timeline&&typeof F==="number")z.timeline=F;this.manifest.preloadSegment=z}),this.parseStream.on("data",function(V){let C,G;({tag(){({version(){if(V.version)this.manifest.version=V.version},"allow-cache"(){if(this.manifest.allowCache=V.allowed,!("allowed"in V))this.trigger("info",{message:"defaulting allowCache to YES"}),this.manifest.allowCache=!0},byterange(){const Y={};if("length"in V){if(z.byterange=Y,Y.length=V.length,!("offset"in V))V.offset=M}if("offset"in V)z.byterange=Y,Y.offset=V.offset;M=Y.offset+Y.length},endlist(){this.manifest.endList=!0},inf(){if(!("mediaSequence"in this.manifest))this.manifest.mediaSequence=0,this.trigger("info",{message:"defaulting media sequence to zero"});if(!("discontinuitySequence"in this.manifest))this.manifest.discontinuitySequence=0,this.trigger("info",{message:"defaulting discontinuity sequence to zero"});if(V.title)z.title=V.title;if(V.duration>0)z.duration=V.duration;if(V.duration===0)z.duration=0.01,this.trigger("info",{message:"updating zero segment duration to a small value"});this.manifest.segments=J},key(){if(!V.attributes){this.trigger("warn",{message:"ignoring key declaration without attribute list"});return}if(V.attributes.METHOD==="NONE"){Z=null;return}if(!V.attributes.URI){this.trigger("warn",{message:"ignoring key declaration without URI"});return}if(V.attributes.KEYFORMAT==="com.apple.streamingkeydelivery"){this.manifest.contentProtection=this.manifest.contentProtection||{},this.manifest.contentProtection["com.apple.fps.1_0"]={attributes:V.attributes};return}if(V.attributes.KEYFORMAT==="com.microsoft.playready"){this.manifest.contentProtection=this.manifest.contentProtection||{},this.manifest.contentProtection["com.microsoft.playready"]={uri:V.attributes.URI};return}if(V.attributes.KEYFORMAT===I){if(["SAMPLE-AES","SAMPLE-AES-CTR","SAMPLE-AES-CENC"].indexOf(V.attributes.METHOD)===-1){this.trigger("warn",{message:"invalid key method provided for Widevine"});return}if(V.attributes.METHOD==="SAMPLE-AES-CENC")this.trigger("warn",{message:"SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"});if(V.attributes.URI.substring(0,23)!=="data:text/plain;base64,"){this.trigger("warn",{message:"invalid key URI provided for Widevine"});return}if(!(V.attributes.KEYID&&V.attributes.KEYID.substring(0,2)==="0x")){this.trigger("warn",{message:"invalid key ID provided for Widevine"});return}this.manifest.contentProtection=this.manifest.contentProtection||{},this.manifest.contentProtection["com.widevine.alpha"]={attributes:{schemeIdUri:V.attributes.KEYFORMAT,keyId:V.attributes.KEYID.substring(2)},pssh:k(V.attributes.URI.split(",")[1])};return}if(!V.attributes.METHOD)this.trigger("warn",{message:"defaulting key method to AES-128"});if(Z={method:V.attributes.METHOD||"AES-128",uri:V.attributes.URI},typeof V.attributes.IV!=="undefined")Z.iv=V.attributes.IV},"media-sequence"(){if(!isFinite(V.number)){this.trigger("warn",{message:"ignoring invalid media sequence: "+V.number});return}this.manifest.mediaSequence=V.number},"discontinuity-sequence"(){if(!isFinite(V.number)){this.trigger("warn",{message:"ignoring invalid discontinuity sequence: "+V.number});return}this.manifest.discontinuitySequence=V.number,F=V.number},"playlist-type"(){if(!/VOD|EVENT/.test(V.playlistType)){this.trigger("warn",{message:"ignoring unknown playlist type: "+V.playlist});return}this.manifest.playlistType=V.playlistType},map(){if(\$={},V.uri)\$.uri=V.uri;if(V.byterange)\$.byterange=V.byterange;if(Z)\$.key=Z},"stream-inf"(){if(this.manifest.playlists=J,this.manifest.mediaGroups=this.manifest.mediaGroups||W,!V.attributes){this.trigger("warn",{message:"ignoring empty stream-inf attributes"});return}if(!z.attributes)z.attributes={};A(z.attributes,V.attributes)},media(){if(this.manifest.mediaGroups=this.manifest.mediaGroups||W,!(V.attributes&&V.attributes.TYPE&&V.attributes["GROUP-ID"]&&V.attributes.NAME)){this.trigger("warn",{message:"ignoring incomplete or missing media group"});return}const Y=this.manifest.mediaGroups[V.attributes.TYPE];if(Y[V.attributes["GROUP-ID"]]=Y[V.attributes["GROUP-ID"]]||{},C=Y[V.attributes["GROUP-ID"]],G={default:/yes/i.test(V.attributes.DEFAULT)},G.default)G.autoselect=!0;else G.autoselect=/yes/i.test(V.attributes.AUTOSELECT);if(V.attributes.LANGUAGE)G.language=V.attributes.LANGUAGE;if(V.attributes.URI)G.uri=V.attributes.URI;if(V.attributes["INSTREAM-ID"])G.instreamId=V.attributes["INSTREAM-ID"];if(V.attributes.CHARACTERISTICS)G.characteristics=V.attributes.CHARACTERISTICS;if(V.attributes.FORCED)G.forced=/yes/i.test(V.attributes.FORCED);C[V.attributes.NAME]=G},discontinuity(){F+=1,z.discontinuity=!0,this.manifest.discontinuityStarts.push(J.length)},"program-date-time"(){if(typeof this.manifest.dateTimeString==="undefined")this.manifest.dateTimeString=V.dateTimeString,this.manifest.dateTimeObject=V.dateTimeObject;z.dateTimeString=V.dateTimeString,z.dateTimeObject=V.dateTimeObject;const{lastProgramDateTime:Y}=this;if(this.lastProgramDateTime=new Date(V.dateTimeString).getTime(),Y===null)this.manifest.segments.reduceRight((O,H)=>{return H.programDateTime=O-H.duration*1000,H.programDateTime},this.lastProgramDateTime)},targetduration(){if(!isFinite(V.duration)||V.duration<0){this.trigger("warn",{message:"ignoring invalid target duration: "+V.duration});return}this.manifest.targetDuration=V.duration,d.call(this,this.manifest)},start(){if(!V.attributes||isNaN(V.attributes["TIME-OFFSET"])){this.trigger("warn",{message:"ignoring start declaration without appropriate attribute list"});return}this.manifest.start={timeOffset:V.attributes["TIME-OFFSET"],precise:V.attributes.PRECISE}},"cue-out"(){z.cueOut=V.data},"cue-out-cont"(){z.cueOutCont=V.data},"cue-in"(){z.cueIn=V.data},skip(){this.manifest.skip=f(V.attributes),this.warnOnMissingAttributes_("#EXT-X-SKIP",V.attributes,["SKIPPED-SEGMENTS"])},part(){j=!0;const Y=this.manifest.segments.length,O=f(V.attributes);if(z.parts=z.parts||[],z.parts.push(O),O.byterange){if(!O.byterange.hasOwnProperty("offset"))O.byterange.offset=_;_=O.byterange.offset+O.byterange.length}const H=z.parts.length-1;if(this.warnOnMissingAttributes_(\`#EXT-X-PART #\${H} for segment #\${Y}\`,V.attributes,["URI","DURATION"]),this.manifest.renditionReports)this.manifest.renditionReports.forEach((N,q)=>{if(!N.hasOwnProperty("lastPart"))this.trigger("warn",{message:\`#EXT-X-RENDITION-REPORT #\${q} lacks required attribute(s): LAST-PART\`})})},"server-control"(){const Y=this.manifest.serverControl=f(V.attributes);if(!Y.hasOwnProperty("canBlockReload"))Y.canBlockReload=!1,this.trigger("info",{message:"#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false"});if(d.call(this,this.manifest),Y.canSkipDateranges&&!Y.hasOwnProperty("canSkipUntil"))this.trigger("warn",{message:"#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set"})},"preload-hint"(){const Y=this.manifest.segments.length,O=f(V.attributes),H=O.type&&O.type==="PART";if(z.preloadHints=z.preloadHints||[],z.preloadHints.push(O),O.byterange){if(!O.byterange.hasOwnProperty("offset")){if(O.byterange.offset=H?_:0,H)_=O.byterange.offset+O.byterange.length}}const N=z.preloadHints.length-1;if(this.warnOnMissingAttributes_(\`#EXT-X-PRELOAD-HINT #\${N} for segment #\${Y}\`,V.attributes,["TYPE","URI"]),!O.type)return;for(let q=0;q<z.preloadHints.length-1;q++){const l=z.preloadHints[q];if(!l.type)continue;if(l.type===O.type)this.trigger("warn",{message:\`#EXT-X-PRELOAD-HINT #\${N} for segment #\${Y} has the same TYPE \${O.type} as preload hint #\${q}\`})}},"rendition-report"(){const Y=f(V.attributes);this.manifest.renditionReports=this.manifest.renditionReports||[],this.manifest.renditionReports.push(Y);const O=this.manifest.renditionReports.length-1,H=["LAST-MSN","URI"];if(j)H.push("LAST-PART");this.warnOnMissingAttributes_(\`#EXT-X-RENDITION-REPORT #\${O}\`,V.attributes,H)},"part-inf"(){if(this.manifest.partInf=f(V.attributes),this.warnOnMissingAttributes_("#EXT-X-PART-INF",V.attributes,["PART-TARGET"]),this.manifest.partInf.partTarget)this.manifest.partTargetDuration=this.manifest.partInf.partTarget;d.call(this,this.manifest)},daterange(){this.manifest.dateRanges.push(f(V.attributes));const Y=this.manifest.dateRanges.length-1;this.warnOnMissingAttributes_(\`#EXT-X-DATERANGE #\${Y}\`,V.attributes,["ID","START-DATE"]);const O=this.manifest.dateRanges[Y];if(O.endDate&&O.startDate&&new Date(O.endDate)<new Date(O.startDate))this.trigger("warn",{message:"EXT-X-DATERANGE END-DATE must be equal to or later than the value of the START-DATE"});if(O.duration&&O.duration<0)this.trigger("warn",{message:"EXT-X-DATERANGE DURATION must not be negative"});if(O.plannedDuration&&O.plannedDuration<0)this.trigger("warn",{message:"EXT-X-DATERANGE PLANNED-DURATION must not be negative"});const H=!!O.endOnNext;if(H&&!O.class)this.trigger("warn",{message:"EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must have a CLASS attribute"});if(H&&(O.duration||O.endDate))this.trigger("warn",{message:"EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must not contain DURATION or END-DATE attributes"});if(O.duration&&O.endDate){const q=O.startDate.getTime()+O.duration*1000;this.manifest.dateRanges[Y].endDate=new Date(q)}if(!K[O.id])K[O.id]=O;else{for(let q in K[O.id])if(!!O[q]&&JSON.stringify(K[O.id][q])!==JSON.stringify(O[q])){this.trigger("warn",{message:"EXT-X-DATERANGE tags with the same ID in a playlist must have the same attributes values"});break}const N=this.manifest.dateRanges.findIndex((q)=>q.id===O.id);this.manifest.dateRanges[N]=A(this.manifest.dateRanges[N],O),K[O.id]=A(K[O.id],O),this.manifest.dateRanges.pop()}},"independent-segments"(){this.manifest.independentSegments=!0},"content-steering"(){this.manifest.contentSteering=f(V.attributes),this.warnOnMissingAttributes_("#EXT-X-CONTENT-STEERING",V.attributes,["SERVER-URI"])}}[V.tagType]||X).call(Q)},uri(){if(z.uri=V.uri,J.push(z),this.manifest.targetDuration&&!("duration"in z))this.trigger("warn",{message:"defaulting segment duration to the target duration"}),z.duration=this.manifest.targetDuration;if(Z)z.key=Z;if(z.timeline=F,\$)z.map=\$;if(_=0,this.lastProgramDateTime!==null)z.programDateTime=this.lastProgramDateTime,this.lastProgramDateTime+=z.duration*1000;z={}},comment(){},custom(){if(V.segment)z.custom=z.custom||{},z.custom[V.customType]=V.data;else this.manifest.custom=this.manifest.custom||{},this.manifest.custom[V.customType]=V.data}})[V.type].call(Q)})}warnOnMissingAttributes_(Q,J,z){const \$=[];if(z.forEach(function(Z){if(!J.hasOwnProperty(Z))\$.push(Z)}),\$.length)this.trigger("warn",{message:\`\${Q} lacks required attribute(s): \${\$.join(", ")}\`})}push(Q){this.lineStream.push(Q)}end(){if(this.lineStream.push("\n"),this.manifest.dateRanges.length&&this.lastProgramDateTime===null)this.trigger("warn",{message:"A playlist with EXT-X-DATERANGE tag must contain atleast one EXT-X-PROGRAM-DATE-TIME tag"});this.lastProgramDateTime=null,this.trigger("end")}addParser(Q){this.parseStream.addParser(Q)}addTagMapper(Q){this.parseStream.addTagMapper(Q)}}class v{integrityToken="";streamList=[];actualChannel="";playingAds=!1;setting;quality="";freeStream=!1;getQuality=()=>global.postMessage({type:"getQuality"});getSettings=()=>global.postMessage({type:"getSettings"});pause=()=>global.postMessage({type:"pause"});play=()=>global.postMessage({type:"play"});setSettings=(Q)=>{this.setting=Q,logPrint("Settings loaded")};setIntegrityToken=(Q)=>this.integrityToken=Q;pauseAndPlay=async()=>{this.pause(),await new Promise((Q)=>setTimeout(Q,1500)),this.play()};onStartAds=()=>{console.log("ads started"),this.pauseAndPlay()};onEndAds=()=>{console.log("ads ended"),this.pauseAndPlay()};isAds=(Q,J=!1)=>{const z=this.hasAds(Q);if(!J)return z;if(this.playingAds==!1&&this.playingAds!=z)this.onStartAds();if(this.playingAds==!0&&this.playingAds!=z)this.onEndAds();return this.playingAds=z,this.playingAds};freeStreamChanged(Q){if(this.freeStream!=Q)this.pauseAndPlay();this.freeStream=Q}hasAds=(Q)=>Q?.toString().includes("stitched")||Q?.toString().includes("Amazon")||Q?.toString().includes("DCM,");currentStream=(Q=this.actualChannel)=>{return this.streamList?.find((J)=>J.channelName===Q)};isWhitelist(){return this.setting?.whitelist?.includes(this.actualChannel)||!1}async onFetch(Q){if(this.isWhitelist())return Q;if(!this.isAds(Q,!0))return this.mergeM3u8Contents([Q]);let J=[];const z=await this.fetchm3u8ByStreamType(B.FRONTPAGE);if(!z.data)this.currentStream().createStreamAccess(B.FRONTPAGE,this.integrityToken);if(z.data)J.push(...z.dump);const \$=await this.fetchm3u8ByStreamType(B.PICTURE);if(!\$.data)this.currentStream().createStreamAccess(B.PICTURE,this.integrityToken);if(\$.data)return Promise.resolve(\$.dump?.[0]??"");if(J?.length)this.freeStreamChanged(!0);else this.freeStreamChanged(!1);return J.length!=0?this.mergeM3u8Contents([JSON.parse(JSON.stringify(Q)),...J]):JSON.parse(JSON.stringify(Q))}generateM3u8(Q){let J="#EXTM3U\n";if(Q.targetDuration)J+=\`#EXT-X-TARGETDURATION:\${Q.targetDuration}\n\`;if(Q.mediaSequence)J+=\`#EXT-X-MEDIA-SEQUENCE:\${Q.mediaSequence}\n\`;if(Q.segments)Q.segments.forEach((z)=>{if(z.duration)J+=\`#EXTINF:\${z.duration}\`,J+="\n";J+=\`\${z.uri}\n\`});return J}mergeM3u8Contents(Q){const J=Q.map((j)=>{const X=new h;X.push(j),X.end();const W=X.manifest;if(W.segments)W.segments.forEach((I)=>{const F=new RegExp(\`#EXTINF:([0-9.]*)?,?(.*)(?:\n|\r\n)\${I.uri}\`),M=j.match(F);if(M)I.title=M[2]?M[2].trim():""});return W}),z=J[0],\$=J.slice(1);if(z.segments){console.log("Segmentos encontrados no manifesto principal:",z.segments.length),console.log("Manifestos de suporte encontrados:",\$.length);let j=0,X=0;for(let W=0;W<z.segments.length;W++){const I=z.segments[W];let F=!1;if(this.hasAds(I.title)){if(\$.forEach((M)=>{const _=M?.segments?.find((K)=>{if(this.hasAds(K.title))return!1;const V=new Date(I.dateTimeString),C=new Date(K.dateTimeString);return V.setMilliseconds(0),C.setMilliseconds(0),V.getTime()===C.getTime()});if(_)z.segments[W]=_,F=!0}),!F)z.segments.splice(W,1),W--,j++;if(F)X++}}console.log("Segmento com ads removidos:",j),console.log("Segmento com ads substitu\xEDdos:",X)}return this.generateM3u8(z)}async fetchm3u8ByStreamType(Q){logPrint("Stream Type: "+Q);let J=[],z=this.currentStream().getStreamByStreamType(Q);for(let \$ of z){const Z=\$.findByQuality(this.quality)||\$.bestQuality(),j=await(await global.request(Z?.url)).text();if(J.push(j),this.isAds(j)){logPrint("Stream Type: "+Q+" - Ads found"),this.currentStream().removeServer(\$);continue}return{data:j,dump:J}}return{data:null,dump:J}}setChannel(Q){logPrint("Loading channel",Q),this.actualChannel=Q;let J=this.streamList.find((z)=>z.channelName===Q);if(!J)J=new T(Q),this.streamList.push(J)}}function y(){global.logPrint=(Q)=>console.log("[Purple]: ",Q),global.appController=new P(new v),global.logPrint("Script running")}global.request=global.fetch;global.fetch=async(Q,J)=>{if(typeof Q==="string"){for(var z=0,\$=routerList.length;z<\$;z++)if(Q.includes(routerList[z].match)&&!Q.includes(routerList[z].ignore))return global.appController[routerList[z].propertyKey](Q,J)}return global.request.apply(null,[Q,J])};y();export{y as default};

//# debugId=5160DE913023DAE364756e2164756e21
//# sourceMappingURL=data:application/json;base64,
`;(function(){let B;window.Worker=class y extends Worker{constructor(g,l){if(console.log("new worker intance "+g),g.toString()=="")super(g,l);console.log("[Purple]: init "+g.toString());const s=new XMLHttpRequest;s.open("GET",g.toString(),!1),s.send();const u=s.responseText,h=`${p}
      ${u}`,c=URL.createObjectURL(new Blob([h],{type:"text/javascript"}));super(c);B=this,B.declareEventWorker(),B.declareEventWindow(),B.integrity()}async integrity(){global.request=fetch,global.fetch=async(g,l)=>{const s=await global.request(g,l),u=await s.text();if(g=="https://gql.twitch.tv/integrity")B.postMessage({funcName:"setIntegrity",value:u});return new Response(u,s)}}declareEventWorker(){this.addEventListener("message",(g)=>{switch(g?.data?.type){case"getSettings":{window.postMessage({type:"getSettings",value:null});break}case"PlayerQualityChanged":{B.postMessage({funcName:"setQuality",value:g.data.arg.name});break}case"pause":{B.postMessage({funcName:"pause",args:void 0,id:1});break}case"play":{B.postMessage({funcName:"play",args:void 0,id:1});break}default:break}switch(g?.data?.arg?.key){case"quality":{if(!g.data.arg.value.name)break;console.log("Changed quality by player: "+g.data.arg.value.name),B.postMessage({funcName:"setQuality",value:g.data.arg.value.name});break}case"state":B.postMessage({funcName:g.data.arg.value});default:break}switch(g?.data?.arg?.name){case"pause":break;case"play":break;default:break}})}declareEventWindow(){window.addEventListener("message",(g)=>{switch(g.data.type){case"setSettings":B.postMessage({funcName:"setSettings",value:g.data.value})}})}}})();

//# debugId=BC6ADDBD0608B0BA64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
